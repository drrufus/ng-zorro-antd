{"version":3,"file":"ng-zorro-antd-core-addon.js","sources":["ng://ng-zorro-antd/core/addon/classlist_add.ts","ng://ng-zorro-antd/core/addon/string_template_outlet.ts","ng://ng-zorro-antd/core/addon/addon.module.ts","ng://ng-zorro-antd/core/addon/public-api.ts","ng://ng-zorro-antd/core/addon/ng-zorro-antd-core-addon.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Alibaba.com All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\n\r\nimport { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[nzClassListAdd]',\r\n  exportAs: 'nzClassListAdd'\r\n})\r\nexport class NzClassListAddDirective {\r\n  classList: string[] = [];\r\n\r\n  @Input()\r\n  set nzClassListAdd(list: string[]) {\r\n    this.classList.forEach(name => {\r\n      this.renderer.removeClass(this.elementRef.nativeElement, name);\r\n    });\r\n    list.forEach(name => {\r\n      this.renderer.addClass(this.elementRef.nativeElement, name);\r\n    });\r\n    this.classList = list;\r\n  }\r\n\r\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Alibaba.com All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\n\r\nimport { Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[nzStringTemplateOutlet]',\r\n  exportAs: 'nzStringTemplateOutlet'\r\n})\r\nexport class NzStringTemplateOutletDirective implements OnChanges {\r\n  private isTemplate: boolean;\r\n  // tslint:disable-next-line:no-any\r\n  private inputTemplate: TemplateRef<any> | null = null;\r\n  private inputViewRef: EmbeddedViewRef<void> | null = null;\r\n  private defaultViewRef: EmbeddedViewRef<void> | null = null;\r\n\r\n  // tslint:disable-next-line:no-any\r\n  @Input() nzStringTemplateOutletContext: any | null = null;\r\n\r\n  @Input()\r\n  // tslint:disable-next-line:no-any\r\n  set nzStringTemplateOutlet(value: string | TemplateRef<any>) {\r\n    if (value instanceof TemplateRef) {\r\n      this.isTemplate = true;\r\n      this.inputTemplate = value;\r\n    } else {\r\n      this.isTemplate = false;\r\n    }\r\n  }\r\n\r\n  recreateView(): void {\r\n    if (!this.isTemplate) {\r\n      /** use default template when input is string **/\r\n      if (!this.defaultViewRef) {\r\n        if (this.defaultTemplate) {\r\n          this.defaultViewRef = this.viewContainer.createEmbeddedView(this.defaultTemplate, this.nzStringTemplateOutletContext);\r\n        }\r\n      }\r\n    } else {\r\n      /** use input template when input is templateRef **/\r\n      if (!this.inputViewRef) {\r\n        if (this.inputTemplate) {\r\n          this.inputViewRef = this.viewContainer.createEmbeddedView(this.inputTemplate, this.nzStringTemplateOutletContext);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private getType(value: string | TemplateRef<any>): 'template' | 'string' {\r\n    if (value instanceof TemplateRef) {\r\n      return 'template';\r\n    } else {\r\n      return 'string';\r\n    }\r\n  }\r\n\r\n  private shouldRecreateView(changes: SimpleChanges): boolean {\r\n    const { nzStringTemplateOutletContext, nzStringTemplateOutlet } = changes;\r\n    let shouldOutletRecreate = false;\r\n    if (nzStringTemplateOutlet) {\r\n      if (nzStringTemplateOutlet.firstChange) {\r\n        shouldOutletRecreate = true;\r\n      } else {\r\n        const previousOutletType = this.getType(nzStringTemplateOutlet.previousValue);\r\n        const currentOutletType = this.getType(nzStringTemplateOutlet.currentValue);\r\n        shouldOutletRecreate = !(previousOutletType === 'string' && currentOutletType === 'string');\r\n      }\r\n    }\r\n    const shouldContextRecreate = nzStringTemplateOutletContext && this.hasContextShapeChanged(nzStringTemplateOutletContext);\r\n    return shouldContextRecreate || shouldOutletRecreate;\r\n  }\r\n\r\n  private hasContextShapeChanged(ctxChange: SimpleChange): boolean {\r\n    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\r\n    const currCtxKeys = Object.keys(ctxChange.currentValue || {});\r\n\r\n    if (prevCtxKeys.length === currCtxKeys.length) {\r\n      for (const propName of currCtxKeys) {\r\n        if (prevCtxKeys.indexOf(propName) === -1) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private updateExistingContext(ctx: any): void {\r\n    for (const propName of Object.keys(ctx)) {\r\n      // tslint:disable-next-line:no-any\r\n      (this.inputViewRef!.context as any)[propName] = this.nzStringTemplateOutletContext[propName];\r\n    }\r\n  }\r\n\r\n  constructor(private viewContainer: ViewContainerRef, private defaultTemplate: TemplateRef<void>) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const recreateView = this.shouldRecreateView(changes);\r\n    if (recreateView) {\r\n      if (this.viewContainer) {\r\n        this.viewContainer.clear();\r\n        this.defaultViewRef = null;\r\n        this.inputViewRef = null;\r\n      }\r\n      this.recreateView();\r\n    } else {\r\n      if (this.inputViewRef && this.nzStringTemplateOutletContext) {\r\n        this.updateExistingContext(this.nzStringTemplateOutletContext);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Alibaba.com All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { NzClassListAddDirective } from './classlist_add';\r\nimport { NzStringTemplateOutletDirective } from './string_template_outlet';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [NzStringTemplateOutletDirective, NzClassListAddDirective],\r\n  declarations: [NzStringTemplateOutletDirective, NzClassListAddDirective]\r\n})\r\nexport class NzAddOnModule {}\r\n","/**\r\n * @license\r\n * Copyright Alibaba.com All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\n\r\nexport { NzAddOnModule } from './addon.module';\r\nexport { NzClassListAddDirective } from './classlist_add';\r\nexport { NzStringTemplateOutletDirective } from './string_template_outlet';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}